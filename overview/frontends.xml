<chapter id="OviewFrontEnds">
  <title>Front Ends</title>
  <para>
    Front ends are programs that provide some form of user interface for Csound. Within these programs, Csound is used to generate sound, and familiarity with Csound code is required in order to use them. Front ends typically add helpful features, such as syntax coloring, graphic widgets, or tools for algorithmic score generation, that are not part of Csound itself. Most of these programs were created by a single person, so some of them are not being maintained. Below is a list (certainly not complete, and perhaps not up to date) of front ends available for Csound.
  </para>
  <para>
  Most often, you'll want to download and install Csound itself before downloading and installing a front end. Some front ends require particular versions of Csound, so if you plan to use a front end, it's recommended that you verify its compatibility before installing Csound.
  </para>
  <bridgehead>QuteCsound</bridgehead>
  <para>
    QuteCsound is a versatile, cross-platform GUI (graphical user interface) which is bundled with the standard Csound distribution. Created and maintained by Andres Cabrera, QuteCsound provides a multi-tabbed editor, graphic widgets for real-time sound control, and an opcode help system that links to this manual. At this writing (2011) QuteCsound is in active development, so the version installed in your system when you install Csound may not be the most current. The most recent version can be found at <ulink url="http://qutecsound.sourceforge.net/">http://qutecsound.sourceforge.net/</ulink>.
  </para>
  <bridgehead>Blue</bridgehead>
  <para>
    A cross-platform composition-oriented front end written by Steven Yi in Java. The user interface provides a timeline structured somewhat like a digital multitrack, but differs in that timelines can be embedded within timelines (polyObjects). This allows for a compositional organization in time that many users will find intuitive, informative, and flexible. Each instrument and score section in a blue project has its own editing window, which makes organizing large projects easier. Blue can be downloaded at <ulink url="http://csounds.com/stevenyi/blue/">Blue Home Page</ulink>.
  </para>
  <bridgehead>Cecilia</bridgehead>
  <para>
	Uses Csound, and also incorporates its own score generation language. Not updated since 2004, but should run in Mac OSX and Linux. Available from <ulink url="http://www.jeanpiche.com/software.htm">http://www.jeanpiche.com/software.htm</ulink>.
  </para>
<bridgehead>MacCsound</bridgehead>
  <para>
    A front end for the Macintosh, MacCsound provides a text editor, graphic editing of control signals, and other features. Available at the <ulink url="http://www.csounds.com/matt/MacCsound/">MacCsound Page</ulink>. MacCsound requires the Universal version of Csound, not the Intel version, and with OS 10.6 also requires Rosetta, which is located in the OSX installer DVD for 10.6 but is not installed by default.
  </para>
  <bridgehead>WinXound</bridgehead>
  <para>
    A convenient front-end for Windows with syntax highlighting. You can get it at the <ulink url="http://winxound.codeplex.com/">WinXsound Front Page</ulink>.
  </para>
  <bridgehead>Cabel</bridgehead>
  <para>
    Cabel is a graphical user interface for building Csound instruments by patching modules, similar to the approach used in modular synthesizers and graphical programming environments such as Pd. Cross-platform, written in Python. While Cabel seems (as of 2011) not to have been updated in four years, it still works with current versions of Csound. Available from <ulink url="http://cabel.sourceforge.net/">http://cabel.sourceforge.net/</ulink>.
  </para>
  <bridgehead>Csound5GUI</bridgehead>
  <para>
    Csound5GUI is a cross-platform GUI. Formerly part of the standard Csound distribution, it is now available as source code and possibly as a downloadable .exe for Windows. It implements most configuration features of Csound.
  </para>
  <bridgehead>CSDplayer</bridgehead>
  <para>
    This is a simple Java program to play csd files. It is included in the standard distribution, and will be of interest mainly to Java programmers.
  </para>
  <bridgehead>Winsound</bridgehead>
  <para>
    Like Csound5GUI, Winsound was formerly part of the main Csound tree. It is now available only as source code. Winsound is a cross-platform FLTK port of Barry Vercoe's original front-end for csound. Some partially sighted or unsighted users report success using Winsound with text-to-speech software. 
  </para>
  <bridgehead>Csound Editor</bridgehead>
  <para>
    Csound Editor is no longer being maintained, but it's still available from <ulink url="http://flavio.tordini.org/csound-editor/">Flavio Tordini's Home Page</ulink>. For Windows systems, includes syntax highlighting.
  </para>
  <para>
    In addition to the main front ends listed above, here are some other programs that may qualify as front ends, depending on your definition:
    <informaltable frame='none'>
      <tgroup cols='2'>
		<tbody>
          <row><entry>GeoMaestro:</entry><entry><ulink url="http://www.zogotounga.net/GM/eGM0.html">http://www.zogotounga.net/GM/eGM0.html</ulink></entry></row>
          <row><entry>Csound-x:</entry><entry><ulink url="http://www.zogotounga.net/comp/csoundx.html">http://www.zogotounga.net/comp/csoundx.html</ulink></entry></row>
		  <row><entry>AthenaCL:</entry><entry><ulink url="http://www.flexatone.net/athena.html">http://www.flexatone.net/athena.html</ulink></entry></row>
          <row><entry>GRACE/Common Music:</entry><entry><ulink url="http://commonmusic.sourceforge.net/">http://commonmusic.sourceforge.net/</ulink></entry></row>
          <row><entry>AlgoScore:</entry><entry><ulink url="http://kymatica.com/Software/AlgoScore">http://kymatica.com/Software/AlgoScore</ulink></entry></row>
          <row><entry>nGen:</entry><entry><ulink url="http://mustec.bgsu.edu/~mkuehn/ngen/">http://mustec.bgsu.edu/~mkuehn/ngen/</ulink></entry></row>
          <row><entry>ImproSculpt:</entry><entry><ulink url="http://improsculpt.sourceforge.net/pmwiki/pmwiki.php">http://improsculpt.sourceforge.net/pmwiki/pmwiki.php</ulink></entry></row>
		</tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <section id="CommandCsoundAC">
    
    <title>CsoundAC</title>
    
    <bridgehead>Python Scripting</bridgehead>
    
    <para>You can use CsoundAC as a Python extension module. You
      can do this in a standard Python interpreter, such as Python
      command line or the Idle Python GUI.</para>
    
    <para>To use CsoundAC in a standard Python interpreter, import
      CsoundAC.</para>
    
    <programlisting>
      import CsoundAC</programlisting>
    
    <para>The CsoundAC module automatically creates an instance of
      CppSound named <application>csound</application>, which provides an object-oriented
      interface to the Csound API. In a standard Python interpreter, you can
      load a Csound <filename>.csd</filename> file and perform it like this: </para>
    
    <programlisting>
      C:\Documents and Settings\mkg>python
      Python 2.3.3 (#51, Dec 18 2003, 20:22:39) [MSC v.1200 32 bit (Intel)] on win32
      Type "help", "copyright", "credits" or "license" for more information.
      >>> import CsoundAC
      >>> csound.load("c:/projects/csound5/examples/trapped.csd")
      1
      >>> csound.exportForPerformance()
      1
      >>> csound.perform()
      BEGAN CppSound::perform(5, 988ee0)...
      BEGAN CppSound::compile(5, 988ee0)...
      Using default language
      0dBFS level = 32767.0
      Csound version 5.00 beta (float samples) Jun  7 2004
      libsndfile-1.0.10pre6
      orchname:  temp.orc
      scorename: temp.sco
      orch compiler:
      398 lines read
      instr   1
      instr   2
      instr   3
      instr   4
      instr   5
      instr   6
      instr   7
      instr   8
      instr   9
      instr   10
      instr   11
      instr   12
      instr   13
      instr   98
      instr   99
      sorting score ...
      ... done
      Csound version 5.00 beta (float samples) Jun  6 2004
      displays suppressed
      0dBFS level = 32767.0
      orch now loaded
      audio buffered in 16384 sample-frame blocks
      SFDIR undefined.  using current directory
      writing 131072-byte blks of shorts to test.wav
      WAV
      SECTION 1:
      ENDED CppSound::compile.
      ftable 1:
      ftable 2:
      ftable 3:
      ftable 4:
      ftable 5:
      ftable 6:
      ftable 7:
      ftable 8:
      ftable 9:
      ftable 10:
      ftable 11:
      ftable 12:
      ftable 13:
      ftable 14:
      ftable 15:
      ftable 16:
      ftable 17:
      ftable 18:
      ftable 19:
      ftable 20:
      ftable 21:
      ftable 22:
      new alloc for instr 1:
      B  0.000 ..  1.000 T  1.000 TT  1.000 M:     32.7      0.0
      new alloc for instr 1:
      B  1.000 ..  3.600 T  3.600 TT  3.600 M:    207.6      0.1
      
      ...
      
      B 93.940 .. 94.418 T 98.799 TT281.799 M:    477.6     85.0
      B 94.418 ..100.000 T107.172 TT290.172 M:    118.9     11.5
      end of section 4         sect peak amps:  25950.8  26877.4
      inactive allocs returned to freespace
      end of score.              overall amps:  32204.8  31469.6
      overall samples out of range:        0        0
      0 errors in performance
      782 131072-byte soundblks of shorts written to test.wav WAV
      Elapsed time = 13.469000 seconds.
      ENDED CppSound::perform.
      1
      >>>
    </programlisting>
    
    <para>The <filename>koch.py</filename> script shows how to use Python
      to do algorithmic composition for Csound. You can use Python
      triple-quoted string literals to hold your Csound files right in your
      script, and assign them to Csound: </para>
    
    <programlisting>
      csound.setOrchestra('''sr = 44100
      kr = 441
      ksmps = 100
      nchnls = 2
      0dbfs = .1
      instr 1,2,3,4,5 ; FluidSynth General MID
      I; INITIALIZATION
      ; Channel, bank, and program determine the preset, that is, the actual sound.
      ichannel		=			p1
      iprogram		=			p6
      ikey	 		= 			p4
      ivelocity 		= 			p5 + 12
      ijunk6 			= 			p6
      ijunk7			=			p7
      ; AUDIO
      istatus			=			144;
      print			iprogram, istatus, ichannel, ikey, ivelocityaleft, aright
      fluid			"c:/projects/csound5/samples/VintageDreamsWaves-v2.sf2", \\
      iprogram, istatus, ichannel, ikey, ivelocity, 1
      outs 			aleft, arightendin''')
      csound.setCommand("csound --opcode-lib=c:/projects/csound5/fluid.dll \\
      -RWdfo ./koch.wav ./temp.orc ./temp.sco")
      csound.exportForPerformance()
      csound.perform()</programlisting>
    
  </section>
  <section id="CommandCsoundVST">
    
    <title>CsoundVST</title>
    <para>
      CsoundVST is a multi-function front end for Csound, based on the
      Csound API. CsoundVST runs as a stand-alone graphical user interface
      to Csound, and it also runs as a VST instrument or effect plugin in VST 
      hosts such as Cubase with the same user interface. CsoundVST is part 
      of the main csound source tree, but is not included in standard distributions, 
      due to licensing limitations of Steinberg's VST SDK.
    </para>
    
    <bridgehead>Standalone</bridgehead>
    
    <para>To run CsoundVST as a stand-alone front end to Csound, execute
      <application>CsoundVST</application>. When the program has loaded, you
      will see a graphical user interface with a row of buttons along the
      top. Click on the <emphasis>Open...</emphasis> button to load a
      <filename>.csd</filename> file. You can also click on the
      <emphasis>Open...</emphasis> button and load a
      <filename>.orc</filename> file, then click on the
      <emphasis>Import...</emphasis> button to add a
      <filename>.sco</filename> file. You can edit the Csound command, the
      orchestra file, or the score file in the respective tabs of the user
      interface. When all is satisfactory, click on the
      <emphasis>Perform</emphasis> button to run Csound. You can stop a
      performance at any time by clicking on the <emphasis>Stop</emphasis>
      button.</para>
    <bridgehead>VST Plugin</bridgehead>
    
    <para>The following instructions are for Cubase 4.0. You would follow
      roughly similar procedures in other hosts.</para>
    
    <para>Use the <emphasis>Devices</emphasis> menu, <emphasis>Plug-In
        Information</emphasis> dialog, <emphasis>VST Plug-Ins</emphasis> tab,
      <emphasis>VST 2.x Plug-in Paths</emphasis> dialog, <emphasis>Add</emphasis> button to add your
      <filename>csound/bin</filename> directory to Cubase's plugin path. You
      can have multiple directories separated by semicolons. Then select the CsoundVST path and 
      click on the <emphasis>Set as Shared Folder</emphasis> button. </para>
    
    <para>Quit Cubase, and start it again.</para>
    
    <para>Use the <emphasis>File</emphasis> menu, <emphasis>New
        Project</emphasis> dialog to create a new song.</para>
    
    <para>Use the <emphasis>Project</emphasis> menu, <emphasis>Add
          Track</emphasis> submenu, to add a new MIDI track.</para>
    
    <para>Use the pencil tool to draw a <emphasis>Part</emphasis> on the
      track a few measures long. Write some music in the
      <emphasis>Part</emphasis> using the <emphasis>Event</emphasis> editor
      or the <emphasis>Score</emphasis> editor.</para>
    
    <para>Use the <emphasis>Devices</emphasis> menu (or the F11 key) to
      open the <emphasis>VST Instruments</emphasis> dialog. </para>

    <para>Click on one of the <emphasis>No VST Instrument</emphasis>
      labels, and select <emphasis>CsoundVST</emphasis> from the list that
      pops up.</para>
    
    <para>Click on the <emphasis>e</emphasis> (for edit) button to open
      the <emphasis>CsoundVST</emphasis> dialog. </para>
    
    <para>On the Settings page, check the <emphasis>Instrument</emphasis> box in the VST Plugin group,
      and the <emphasis>Classic</emphasis> box in the <emphasis>Csound performance mode</emphasis> group.
      Then click on the <emphasis>Apply</emphasis> button.</para>
    
    <para>Click on the <emphasis>Open</emphasis> button to bring up the
      file selector dialog. Navigate to a directory containing a Csound csd
      file suitable for MIDI performance, such as
      <filename>csound/examples/CsoundVST.csd</filename>. Click on the OK button to
      load the file. You can also open and import a suitable <filename>.orc</filename>
      and <filename>.sco</filename> file as described above. </para>
    
    <para>In any event, the command line in the <emphasis>Classic Csound command line</emphasis> text box must specify
      <literal>-+rtmidi=null -M0</literal>, and should read something like this:</para>
    
    <programlisting>
      <command>csound</command> -f -h -+rtmidi=null -M0 -d -n -m7 --midi-key-oct=4 --midi-velocity=5 temp.orc temp.sco</programlisting>
    
    <para>Click on the <emphasis>VST Instruments</emphasis> dialog's
      on/off button to turn it on. This should compile the Csound
      orchestra.</para>
    
    <para>In the <emphasis>Cubase Track Inspector</emphasis>, click on the
      <emphasis>out: Not Assigned</emphasis> label and select
      <emphasis>CsoundVST</emphasis> from the list that pops up.</para>
    
    <para>On the ruler at the top of the <emphasis>Arrangement</emphasis>
      window, select the loop end point and drag it to the end of your part,
      then click on the loop button to enable looping. </para>
    
    <para>Click on the <emphasis>play</emphasis> button on the
      <emphasis>Transport</emphasis> bar. You should hear your music played
      by CsoundVST. </para>
    
    <para>Try assigning your track to different channels; a different
      Csound instrument will perform each channel. </para>
    
    <para>When you save your song, your Csound orchestra will be saved as
      part of the song and re-loaded when you re-load the song. </para>
    
    <para>You can click on the <emphasis>Orchestra</emphasis> tab and edit
      your Csound instruments while CsoundVST is playing. To hear your
      changes, just click on the CsoundVST <emphasis>Perform</emphasis>
      button to recompile the orchestra. </para>
    
    <para>You can assign up to 16 channels to a single CsoundVST
      plugin.</para>
    
  </section>
  
</chapter>
