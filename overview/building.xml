<chapter id="BuildingCsound">
  <title>Building Csound</title>

  <para>
    Csound has become a complex project and can involve many dependencies. Unless you are a Csound developer or need to develop Csound plugins,
you should try to use one of the precompiled distributions from <ulink
      url="http://www.sourceforge.net/projects/csound">http://www.sourceforge.net/projects/csound</ulink>. However,
building from source is probably the best option on GNU/Linux.
  </para>
  <para>
    This section focuses on the main Csound 6 build system, which uses
    <ulink url="http://www.cmake.org">cmake</ulink>, a cross-platform,
    open-source build system designed to build, test and package software.
  </para>
  <para>
    When building Csound from source instead of using a precompiled package, you first need to obtain the sources for a release of Csound at <ulink url="http://www.sourceforge.net/projects/csound">http://www.sourceforge.net/projects/csound</ulink>. The source packages have either a zip or tar.gz extension.
  </para>
  <para>
    The latest (possibly unstable) Csound source code is also available through GIT. The Csound GIT front page is located at: <ulink url="http://csound.git.sourceforge.net/git/gitweb-index.cgi">http://csound.git.sourceforge.net/git/gitweb-index.cgi</ulink>.
 Using git for just checking out and compiling is pretty easy. Install GIT for your platform and use this command to clone the Csound6 git repository:
  </para>
  <programlisting>git clone git://git.code.sf.net/p/csound/csound6-git csound-csound6-git</programlisting>
  <para>
This will checkout a read-only (meaning, you can not commit back to the central git repository) version of the Csound6 repo. To update with the latest from the master repo, use:
  </para>
  <programlisting>git pull</programlisting>
  <para>
    The same process is used for the Csound manual. Use this command to clone:
  </para>
  <programlisting>git clone git://git.code.sf.net/p/csound/csound6-git csound6-git</programlisting>
  <bridgehead>Basic requirements to build Csound 6 on any platform</bridgehead>
  <itemizedlist>
    <listitem>
      <simpara>
        Install libdsndfile version 1.0.13 or later from <ulink url="http://www.mega-nerd.com/libsndfile">www.mega-nerd.com/libsndfile</ulink>.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Install the Cmake build system from <ulink
        url="http://www.cmake.org">www.scons.org</ulink> or from your
        system packages.
      </simpara>
    </listitem>
  </itemizedlist>
  <para>
    These are the minimum requirements for a build, but csound has
    many optional components which enhance functionality and add
    opcodes which may require additional libraries.
  </para>
  <bridgehead>Optional configurations (ALL platforms)</bridgehead>

  <para>In most cases it is best to install the most recent stable versions of the optional libraries.
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        Real-time audio can use the cross-platform PortAudio library
        (trunk version or devel-19 branch) from <ulink
        url="http://www.portaudio.com/usingcvs.html">www.portaudio.com/usingcvs.html</ulink>. Please
        note that stable version 18 will not work. Csound can also use
        several platform specific audio APIs like ALSA, JACK,
        CoreAudio and the Windows multimedia library, see each
        platform notes for details. On Windows, you can use the pre-built PortAudio
        from <ulink
        url="https://github.com/adfernandes/precompiled-portaudio-windows"></ulink>
      </simpara>https://github.com/adfernandes/precompiled-portaudio-windows
    </listitem>
    <listitem>
      <simpara>
        Real-time MIDI can use the cross-platform PortMidi library from <ulink url="http://www.cs.cmu.edu/~music/portmusic">www.cs.cmu.edu/~music/portmusic</ulink>
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        For GUI widgets, install FLTK 1.1 or 1.3 from <ulink url="http://www.fltk.org">www.fltk.org</ulink>.
        You must configure and build FLTK with <literal>--enable-shared --enable-threads</literal>.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        For generating Python and Java interfaces, install the Software Interface and Wrapper Generator (SWIG) from <ulink url="http://www.swig.org">http://www.swig.org</ulink>.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Install Python from <ulink
        url="http://www.python.org">www.python.org</ulink>. In most
        cases it is best to install the most recent 2.7 version.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        <emphasis>CsoundAC</emphasis> requires FLTK and the boost C++
        template libraries for random numbers and linear algebra, from
        <ulink
            url="http://www.boost.org">http://www.boost.org</ulink>. <emphasis>CsoundAC</emphasis>
        requires at least version 1.32.1.
      </simpara>
    </listitem>
    <listitem>
      <simpara>The fluid opcodes require the Fluidsynth library from
      <ulink
          url="http://savannah.nongnu.org/download/fluid">http://savannah.nongnu.org/download/fluid</ulink>.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        The OSC opcodes require the latest version of the liblo library from
        <ulink
            url="http://plugin.org.uk/liblo">http://plugin.org.uk/liblo</ulink>.
        On Windows, liblo requires a Windows version of the POSIX
        thread library (pthreads) which is available from
        <ulink
            url="http://sourceware.org/pthreads-win32">
          http://sourceware.org/pthreads-win32</ulink>;
        copy libpthreadGC2.a to libpthread.a.
        You may also need the latest version of autoconf from MinGW.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        The STK opcodes require STK source code from <ulink
        url="http://ccrma.stanford.edu/software/stk">
        http://ccrma.stanford.edu/software/stk</ulink>,
        copied into <filename>csound6/Opcodes/stk</filename>.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        The Loris opcodes requires Loris 1.8 to be installed: <ulink url="http://sourceforge.net/projects/loris/files">http://sourceforge.net/projects/loris/files</ulink>. It will create the Csound Loris opcodes (along with Loris itself). When you run Csound use an additional command line flag: --opcode-lib. For example in Linux: --opcode-lib=/usr/local/lib/libloris.so
      </simpara>
    </listitem>
  </itemizedlist>

  <bridgehead>Windows</bridgehead>
  <para>The following is needed to build on Windows (more complete
  build instructions for Windows may be found in <filename>How_to_Build_Csound_on_Windows.doc</filename>):</para>
  <itemizedlist>
    <listitem>
      <simpara>
        Install a compiler like gcc or Microsoft Visual Studio. If using MinGW
        (gcc), download the MinGW-build installer for 32-bit architecture, Posix threads, dwarf2 exception handling from <ulink
        url="http://sourceforge.net/projects/mingwbuilds/files/latest/download?source=files"/>
        and run it. Install to a directory such as <filename>D:/mingw32-4.8.1</filename>.
      </simpara>
      <simpara>
        In addition to the compiler, building Csound and its dependencies
        requires some other tools. Install MSys from <ulink
        url="http://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/msys%2B7za%2Bwget%2Bsvn%2Bgit%2Bmercurial%2Bcvs-rev13.7z/download">
        http://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/msys%2B7za%2Bwget%2Bsvn%2Bgit%2Bmercurial%2Bcvs-rev13.7z/download</ulink>.
        This includes bison, flex, autotools and some other goodies. Edit the MSys <filename>etc/fstab</filename> file to map the MinGW directory to <filename>/mingw</filename>.
      </simpara>
      <simpara>
        Options for the MinGW C compiler should be <literal>-g -O2 -fopenmp -march=nocona -mstackrealign -DNDEBUG -I/usr/local/include</literal>.
      </simpara>
      <simpara>
        Options for the MinGW C++ compiler should be <literal>-g -O2 -std=gnu++11 -fopenmp -march=nocona -mstackrealign -DNDEBUG -I/usr/local/include</literal>.
      </simpara>
      <!-- <simpara> -->
      <!--   On Windows you can use Microsoft Visual C++ (except for -->
      <!--   CsoundAC). The free Express Edition, from <ulink -->
      <!--   url="http://www.microsoft.com/express/vc/">http://www.microsoft.com/express/vc/</ulink> -->
      <!--   works fine. You will need to obtain a copy of the -->
      <!--   <filename>dirent.h</filename> header file for Windows, -->
      <!--   e.g. from <ulink -->
      <!--   url="http://www.softagalleria.net/dirent.php">http://www.softagalleria.net/dirent.php</ulink>. You -->
      <!--   may also need to obtain the -->
      <!--   <literal>bufferoverflowu.lib</literal> library from Microsoft -->
      <!--   and put it into the Visual C++ <filename>lib</filename> -->
      <!--   directory. Then open a shell in which to compile Csound, -->
      <!--   (usually called Visual Studio Command Prompt command, within -->
      <!--   the Visual C++ program menu). -->
      <!-- </simpara> -->
    </listitem>
  </itemizedlist>
  <para>Optional configurations for Windows include the following:</para>
  <itemizedlist>
    <listitem>
      <simpara>
        Real-time audio and MIDI can use the Windows multimedia
        library. This module will be built automatically if the
        headers are found.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        The VST Host opcodes require both the Steinberg VST headers.
      </simpara>
    </listitem>
  </itemizedlist>
  <bridgehead>Linux</bridgehead>
  <para>Optional configurations for Linux include the following:</para>
  <itemizedlist>
    <listitem>
      <simpara>
        Real-time audio on Linux can use ALSA (<ulink
        url="http://www.alsa-project.org">www.alsa-project.org</ulink>)
        and JACK (<ulink
        url="http://www.jackaudio.org/">www.jackaudio.org/</ulink>) in
        addition to PortAudio. Distributions usually provide the
        appropriate dev packages for these systems through their
        repositories.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        The DSSI Host opcodes require both the LADSPA and DSSI headers.
      </simpara>
    </listitem>
  </itemizedlist>
  <bridgehead>Mac OS X</bridgehead>
  <para>Optional configurations for Mac OS X include the following:</para>
  <itemizedlist>
    <listitem>
      <simpara>
        Real-time audio can use CoreAudio (OSX builtin native audio
        system) and Jack, apart from PortAudio.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        The DSSI Host opcodes require both the LADSPA and DSSI headers.
      </simpara>
    </listitem>
  </itemizedlist>

  <bridgehead>Building Csound 6 with CMake</bridgehead>
  <para>
    When you have all the necessary packages and their sources (or
    -dev packages) to support your particular requirements on your
    hardware platform it is best to review the file
    <programlisting>Custom.cmake.ex</programlisting> to discover the
    current configuration options.  make any changes and place your
    customisations in <programlisting>Custom.cmake</programlisting>
  </para>
  <para>
    Building is made considerably easier if, when installing, the
    downloaded headers and libraries are installed in their default
    locations. To modify the default build, in particular to handle
    non-standard options for third-party dependencies, such as where
    headers and libraries are to be found:
  </para>
  <para>
    Avoid modifying the CMakeList.txt files.
  </para>
  <para>
    With CMake it is usual to build in a difference directory to the
    sources.  Create a directory for your build, change to that
    directory and run <programlisting>cmake
    path-to-source-directory</programlisting>.  All being well this
    will create Makefiles as necessary.  You can then run "make" and
    "make install".  If things go wrong it is sometime necessary to
    delete the file <programlisting>CMakeCache.txt</programlisting>.
  </para>
  <note>
    <para>
      It is important that you set the environment variable
      <literal>OPCODE6DIR</literal> to the directory where plugin
      libraries are installed; in the case of a double precision
      build, <literal>OPCODE6DIR64</literal> should be set
      instead. Installers usually take care of this, but it is
      necessary when building from source so Csound can find its
      plugin libraries.
    </para>
  </note>
  <!-- <bridgehead>Current build options</bridgehead> -->
  <!-- <table frame="all" colsep="1"> -->
  <!--   <title>Current SCons Build Options</title> -->
  <!--   <tgroup cols="2"> -->
  <!--     <thead> -->
  <!--       <row> -->
  <!--         <entry>Custom Variable</entry> -->
  <!--         <entry>Effect if set to 1</entry> -->
  <!--       </row> -->
  <!--     </thead> -->

  <!--     <tbody> -->
  <!--       <row> -->
  <!--         <entry>includeP5Glove</entry> -->
  <!--         <entry>Build for use with P5 Glove.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildCsoundVST</entry> -->
  <!--         <entry>Build CsoundVST. Needs CsoundAC, FLTK, boost, Python, SWIG.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildCsoundAC</entry> -->
  <!--         <entry>Build CsoundAC. Needs FLTK, boost, Python, SWIG.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildCsound5GUI</entry> -->
  <!--         <entry>Build FLTK GUI frontend. Requires FLTK 1.1.7 or later.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildCSEditor</entry> -->
  <!--         <entry>Build the Csound syntax highlighting text editor. Requires FLTK headers and libs.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildDSSI</entry> -->
  <!--         <entry>Build DSSI/LADSPA host opcodes.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildImageOpcodes</entry> -->
  <!--         <entry>Build image opcodes. 1 by default. Set to 0 to avoid.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildInterfaces</entry> -->
  <!--         <entry>Build interface library for Python, JAVA, Lua, C++, and other languages.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildJavaWrapper</entry> -->
  <!--         <entry>Build Java wrapper for the interface library.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildLuaOpcodes</entry> -->
  <!--         <entry>Build Lua opcodes. Set to 1 to build.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildLuaWrapper</entry> -->
  <!--         <entry>Build Lua wrapper for the C++ interface library (needs buildInterfaces).</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildNewParser</entry> -->
  <!--         <entry>Enable building new parser. Requires Flex/Bison.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildOSXGUI</entry> -->
  <!--         <entry>Build the basic GUI frontend. OSX only.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildPDClass</entry> -->
  <!--         <entry>Build csoundapi~ PD class. Needs m_pd.h in the standard places.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildPythonOpcodes</entry> -->
  <!--         <entry>Build Python opcodes</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildPythonWrapper</entry> -->
  <!--         <entry>Build Python wrapper for the C++ interface library (needs buildInterfaces).</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildRelease</entry> -->
  <!--         <entry>Build for release. Implies noDebug.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildSDFT</entry> -->
  <!--         <entry>Build SDFT code. 1 by default. Set to 0 to avoid.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildStkOpcodes</entry> -->
  <!--         <entry>build Stk Opcodes. Requires STK source code.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildUtilities</entry> -->
  <!--         <entry>Build stand-alone executables for utilities that can also be used with -U.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildVirtual</entry> -->
  <!--         <entry>Build Virtual MIDI keyboard. Requires FLTK 1.1.7 or later headers and libs.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildvst4cs</entry> -->
  <!--         <entry>Build vst4cs plugins. Requires Steinberg VST headers.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildWinsound</entry> -->
  <!--         <entry>Build Winsound frontend. Requires FLTK headers and libs.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildBeats</entry> -->
  <!--         <entry>Build csbeats score processor.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>bufferoverflowu</entry> -->
  <!--         <entry>Set to 1 to use the Windows buffer overflow library, required if you use MinGW to link with MSVC-built libraries.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>dynamicCsoundLibrary</entry> -->
  <!--         <entry>Build dynamic Csound library instead of libcsound.a.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>gcc3opt</entry> -->
  <!--         <entry>Enable gcc 3.3.x or later optimizations for the specified CPU architecture (e.g. pentium3); implies noDebug.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>gcc4opt</entry> -->
  <!--         <entry>Enable gcc 4.0 or later optimizations for the specified CPU architecture (e.g. pentium3); implies noDebug.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>generateTags</entry> -->
  <!--         <entry>Generate TAGS.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>generatePdf</entry> -->
  <!--         <entry>Generate PDF documentation.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>install</entry> -->
  <!--         <entry>Enables the Install targets.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>Lib64</entry> -->
  <!--         <entry>Build for lib64 rather than lib.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>noDebug</entry> -->
  <!--         <entry>Build without debugging information.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>noFLTKThreads</entry> -->
  <!--         <entry>Disable use of a separate thread for FLTK widgets.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useAltivec</entry> -->
  <!--         <entry>On OSX use the gcc AltiVec optmisation flags.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useALSA</entry> -->
  <!--         <entry>ALSA for real-time audio and MIDI input and output.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useCoreAudio</entry> -->
  <!--         <entry>use CoreAudio for real-time audio input and output.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useDouble</entry> -->
  <!--         <entry>Use double-precision floating point for audio samples.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useFLTK</entry> -->
  <!--         <entry>Use FLTK for graphs and widget opcodes.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useGettext</entry> -->
  <!--         <entry>Use the GNU internationalisation/localisation scheme</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useIpMIDI</entry> -->
  <!--         <entry>Build for use as a network synth.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useGprof</entry> -->
  <!--         <entry>Build with profiling information (-pg).</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>usePortAudio</entry> -->
  <!--         <entry>Use PortAudio for real-time audio input and output.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>usePortMIDI</entry> -->
  <!--         <entry>Build PortMidi plugin for real time MIDI input and output.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useJack</entry> -->
  <!--         <entry>Used if you compiled PortAudio to use Jack; also builds Jack plugin.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useLrint</entry> -->
  <!--         <entry>Use lrint() and lrintf() for converting floating point values to integers.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useOSC</entry> -->
  <!--         <entry>For OSC support.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useUDP</entry> -->
  <!--         <entry>For UDP support. 1 by default. Set to 0 to avoid.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>withICL</entry> -->
  <!--         <entry>Build with the Intel C++ Compiler (also requires Microsoft Visual C++), Set to 0 to build with MinGW. Windows only.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>withMSVC</entry> -->
  <!--         <entry>Build with Microsoft Visual C++, or set to 0 to build with MinGW. Windows only.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>withSunStudio</entry> -->
  <!--         <entry>On Solaris, set to 1 to build with Sun Studio, or set to 0 to build with gcc.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>NewParserDebug</entry> -->
  <!--         <entry>Enable tracing of new parser</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>Word64</entry> -->
  <!--         <entry>Build for 64bit computer.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>pythonVersion</entry> -->
  <!--         <entry>Set to the Python version to be used.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>includeSerial</entry> -->
  <!--         <entry>Set to 1 if compiling serial code.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildcatalog</entry> -->
  <!--         <entry>Set to 1 if building opcode/library catalogue.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>includeWii</entry> -->
  <!--         <entry>Set to 12 or 13 if using libwiiuse v0.12 or v0.13.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>useOpenMP</entry> -->
  <!--         <entry>Set to 1 to use OpenMP for parallel performance.</entry> -->
  <!--       </row> -->
  <!--       <row> -->
  <!--         <entry>buildMultiCore</entry> -->
  <!--         <entry>building for multicore sytem (requires new parser).</entry> -->
  <!--       </row> -->
  <!--     </tbody> -->
  <!--   </tgroup> -->
  <!-- </table> -->
</chapter>

