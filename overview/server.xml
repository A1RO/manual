<section id="udpserver">
  <title>UDP Server</title>
  <para>
    Csound 6 includes a fully-functional UDP server, which can accept a range of commands and/or
    orchestra.
  </para>
  <bridgehead>Overview</bridgehead>
  <para>
      The UDP server can be started with the following option:
  </para>
  <literallayout>
   --port=N
  </literallayout>
    <para>
   where N indicates a port number to listen to UDP messages. Csound does not necessarily need to be
   given a CSD or orchestra, although it is also possible to do so.
    </para>
  <bridgehead>Commands</bridgehead>
  <para>
      Commands take the form of an opcode followed by one or more
      arguments. The following commands are accepted by the server:
  </para>
  <literallayout>
   &amp;[line event]
  </literallayout>
<para>
  Sends in a line event [live event]. Multiple events can be send on multiple
  lines. Use this command for single or multiple events that do
  not need preprocessing.
</para>
  <literallayout>
   $[score]
  </literallayout>
<para>
  Sends in a score [score], to which most preprocessing (except for tempo) can
  be applied. Use this option for larger blocks of score events.
</para>
  <literallayout>
   @[channel_name] [value]
  </literallayout>
<para>
  Set a control channel [channel_name] with the value [value].
</para>
  <literallayout>
   %[channel_name] [string]
  </literallayout>
<para>
  Set a string channel [channel_name] with the string [string].
  </para>
  <literallayout>
   :@[channel_name] [address] [port]
  </literallayout>
<para>
  Request the value of the control channel [channel_name] to be
  sent as a string via UDP to address [address] port [port]. The
  string will contain the channel name followed by two colons (::)
  and its current value.
</para>
  <literallayout>
   :%[channel_name] [address] [port]
  </literallayout>
<para>
  Request the contents of the string channel [channel_name] to be
  sent as a string via UDP to address [address] port [port]. The
  string will contain the channel name followed by two colons (::)
  and its current contents.
</para>
<bridgehead>Orchestra code</bridgehead>

<para>
In addition to the above commands, the UDP server also accepts a
string containing orchestra code, which is compiled immediately.
The orchestra string is not prefixed with any special command
opcode. This string should be sent in a single UDP message.
</para>

<para>
  If the orchestra code length exceeds the number of characters that
  are possible in a single message, it can be broken in separate
  messages. For this to work, the whole orchestra code needs to
  enclosed in brackets ({ }). The open brackets ({) starts the server
  taking the code in and the close brackets (}) sends the code for
 compilation. This way the code can be sent in multiple messages.
</para>

<bridgehead>Closing the server</bridgehead>
<para>
The server (and Csound) can be closed with one of the following
commands:
</para>
  <literallayout>
    ##close##
  </literallayout>
 <para>
or
</para>
    <literallayout>
   !!close!!
  </literallayout>
</section>
